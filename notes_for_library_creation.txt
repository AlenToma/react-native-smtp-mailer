1) Globally installed react-native-create-library module
2) > react-native-create-library --platforms android,ios library-name //library name should be without react-native because RN is automatically added afterwards to package and is bad
3) > mv library-name react-native-library-name //then rename library as i wish 
4) initialize git
 > cd react-native-secure-keystore
 > git init
 > git add -A
 > git commit -m "Initial Commit"
5)/*ANDROID*/

RNLibraryNameModule.java will be where i implement code which is accessible to RN.

@ReactMethod on top of a function marks this function as accessible by RN
*Where a native method needs context, i use getReactApplicationContext().
*If i want to use promise, i import react.bridge.promise as a parameter, and then i can call .then/.catch from RN

Adding native library: in /libs i add jar files, then in build.gradle of library:
 > compile fileTree(dir: 'libs', include: '*.jar')

6)/*iOS*/

To test a React Native bridge library, -> write a test application,with below commands inside my library's folder
 > npm link //register my library to npm locally
 > react-native init example
 > cd example
 > npm link react-native-secure-keystore //link local library with my example project
 > react-native link react-native-secure-keystore
 *When i make change into local library and want to rebuild, then:
 > cd android && ./gradlew clean && cd ..
 > react-native run-android //rerun, maybe reopen npm server too
/*also update package.json with author-license-repo etc*/

***BUILDING MAILER FROM GITHUB REPO TO OTHER REACT NATIVE APP***
in android/app/build.gradle of app, enter:
 > packagingOptions {
      exclude 'META-INF/mimetypes.default'
      exclude 'META-INF/mailcap.default'
    }
